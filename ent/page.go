// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"telegra/ent/page"

	"entgo.io/ent/dialect/sql"
)

// Page is the model entity for the Page schema.
type Page struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// AuthorName holds the value of the "author_name" field.
	AuthorName string `json:"author_name,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Views holds the value of the "views" field.
	Views int `json:"views,omitempty"`
	// CanEdit holds the value of the "can_edit" field.
	CanEdit bool `json:"can_edit,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Page) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case page.FieldCanEdit:
			values[i] = new(sql.NullBool)
		case page.FieldID, page.FieldViews:
			values[i] = new(sql.NullInt64)
		case page.FieldPath, page.FieldURL, page.FieldTitle, page.FieldDescription, page.FieldAuthorName, page.FieldImageURL, page.FieldContent:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Page", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Page fields.
func (pa *Page) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case page.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case page.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				pa.Path = value.String
			}
		case page.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				pa.URL = value.String
			}
		case page.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pa.Title = value.String
			}
		case page.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pa.Description = value.String
			}
		case page.FieldAuthorName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_name", values[i])
			} else if value.Valid {
				pa.AuthorName = value.String
			}
		case page.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				pa.ImageURL = value.String
			}
		case page.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				pa.Content = value.String
			}
		case page.FieldViews:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field views", values[i])
			} else if value.Valid {
				pa.Views = int(value.Int64)
			}
		case page.FieldCanEdit:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_edit", values[i])
			} else if value.Valid {
				pa.CanEdit = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Page.
// Note that you need to call Page.Unwrap() before calling this method if this Page
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Page) Update() *PageUpdateOne {
	return (&PageClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the Page entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Page) Unwrap() *Page {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Page is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Page) String() string {
	var builder strings.Builder
	builder.WriteString("Page(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("path=")
	builder.WriteString(pa.Path)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(pa.URL)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(pa.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pa.Description)
	builder.WriteString(", ")
	builder.WriteString("author_name=")
	builder.WriteString(pa.AuthorName)
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(pa.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(pa.Content)
	builder.WriteString(", ")
	builder.WriteString("views=")
	builder.WriteString(fmt.Sprintf("%v", pa.Views))
	builder.WriteString(", ")
	builder.WriteString("can_edit=")
	builder.WriteString(fmt.Sprintf("%v", pa.CanEdit))
	builder.WriteByte(')')
	return builder.String()
}

// Pages is a parsable slice of Page.
type Pages []*Page

func (pa Pages) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
