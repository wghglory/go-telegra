// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"telegra/ent/account"
	"telegra/ent/page"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PageCreate is the builder for creating a Page entity.
type PageCreate struct {
	config
	mutation *PageMutation
	hooks    []Hook
}

// SetPath sets the "path" field.
func (pc *PageCreate) SetPath(s string) *PageCreate {
	pc.mutation.SetPath(s)
	return pc
}

// SetURL sets the "url" field.
func (pc *PageCreate) SetURL(s string) *PageCreate {
	pc.mutation.SetURL(s)
	return pc
}

// SetTitle sets the "title" field.
func (pc *PageCreate) SetTitle(s string) *PageCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *PageCreate) SetDescription(s string) *PageCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *PageCreate) SetNillableDescription(s *string) *PageCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetAuthorName sets the "author_name" field.
func (pc *PageCreate) SetAuthorName(s string) *PageCreate {
	pc.mutation.SetAuthorName(s)
	return pc
}

// SetNillableAuthorName sets the "author_name" field if the given value is not nil.
func (pc *PageCreate) SetNillableAuthorName(s *string) *PageCreate {
	if s != nil {
		pc.SetAuthorName(*s)
	}
	return pc
}

// SetAuthorURL sets the "author_url" field.
func (pc *PageCreate) SetAuthorURL(s string) *PageCreate {
	pc.mutation.SetAuthorURL(s)
	return pc
}

// SetNillableAuthorURL sets the "author_url" field if the given value is not nil.
func (pc *PageCreate) SetNillableAuthorURL(s *string) *PageCreate {
	if s != nil {
		pc.SetAuthorURL(*s)
	}
	return pc
}

// SetImageURL sets the "image_url" field.
func (pc *PageCreate) SetImageURL(s string) *PageCreate {
	pc.mutation.SetImageURL(s)
	return pc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (pc *PageCreate) SetNillableImageURL(s *string) *PageCreate {
	if s != nil {
		pc.SetImageURL(*s)
	}
	return pc
}

// SetContent sets the "content" field.
func (pc *PageCreate) SetContent(s string) *PageCreate {
	pc.mutation.SetContent(s)
	return pc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pc *PageCreate) SetNillableContent(s *string) *PageCreate {
	if s != nil {
		pc.SetContent(*s)
	}
	return pc
}

// SetViews sets the "views" field.
func (pc *PageCreate) SetViews(i int) *PageCreate {
	pc.mutation.SetViews(i)
	return pc
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (pc *PageCreate) SetNillableViews(i *int) *PageCreate {
	if i != nil {
		pc.SetViews(*i)
	}
	return pc
}

// SetCanEdit sets the "can_edit" field.
func (pc *PageCreate) SetCanEdit(b bool) *PageCreate {
	pc.mutation.SetCanEdit(b)
	return pc
}

// SetNillableCanEdit sets the "can_edit" field if the given value is not nil.
func (pc *PageCreate) SetNillableCanEdit(b *bool) *PageCreate {
	if b != nil {
		pc.SetCanEdit(*b)
	}
	return pc
}

// SetAuthorID sets the "author" edge to the Account entity by ID.
func (pc *PageCreate) SetAuthorID(id int) *PageCreate {
	pc.mutation.SetAuthorID(id)
	return pc
}

// SetNillableAuthorID sets the "author" edge to the Account entity by ID if the given value is not nil.
func (pc *PageCreate) SetNillableAuthorID(id *int) *PageCreate {
	if id != nil {
		pc = pc.SetAuthorID(*id)
	}
	return pc
}

// SetAuthor sets the "author" edge to the Account entity.
func (pc *PageCreate) SetAuthor(a *Account) *PageCreate {
	return pc.SetAuthorID(a.ID)
}

// Mutation returns the PageMutation object of the builder.
func (pc *PageCreate) Mutation() *PageMutation {
	return pc.mutation
}

// Save creates the Page in the database.
func (pc *PageCreate) Save(ctx context.Context) (*Page, error) {
	var (
		err  error
		node *Page
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Page)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PageMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PageCreate) SaveX(ctx context.Context) *Page {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PageCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PageCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PageCreate) defaults() {
	if _, ok := pc.mutation.Views(); !ok {
		v := page.DefaultViews
		pc.mutation.SetViews(v)
	}
	if _, ok := pc.mutation.CanEdit(); !ok {
		v := page.DefaultCanEdit
		pc.mutation.SetCanEdit(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PageCreate) check() error {
	if _, ok := pc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "Page.path"`)}
	}
	if _, ok := pc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Page.url"`)}
	}
	if _, ok := pc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Page.title"`)}
	}
	if v, ok := pc.mutation.Title(); ok {
		if err := page.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Page.title": %w`, err)}
		}
	}
	if v, ok := pc.mutation.AuthorName(); ok {
		if err := page.AuthorNameValidator(v); err != nil {
			return &ValidationError{Name: "author_name", err: fmt.Errorf(`ent: validator failed for field "Page.author_name": %w`, err)}
		}
	}
	if v, ok := pc.mutation.AuthorURL(); ok {
		if err := page.AuthorURLValidator(v); err != nil {
			return &ValidationError{Name: "author_url", err: fmt.Errorf(`ent: validator failed for field "Page.author_url": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Views(); !ok {
		return &ValidationError{Name: "views", err: errors.New(`ent: missing required field "Page.views"`)}
	}
	if _, ok := pc.mutation.CanEdit(); !ok {
		return &ValidationError{Name: "can_edit", err: errors.New(`ent: missing required field "Page.can_edit"`)}
	}
	return nil
}

func (pc *PageCreate) sqlSave(ctx context.Context) (*Page, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PageCreate) createSpec() (*Page, *sqlgraph.CreateSpec) {
	var (
		_node = &Page{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: page.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: page.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Path(); ok {
		_spec.SetField(page.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := pc.mutation.URL(); ok {
		_spec.SetField(page.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(page.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(page.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.AuthorName(); ok {
		_spec.SetField(page.FieldAuthorName, field.TypeString, value)
		_node.AuthorName = value
	}
	if value, ok := pc.mutation.AuthorURL(); ok {
		_spec.SetField(page.FieldAuthorURL, field.TypeString, value)
		_node.AuthorURL = value
	}
	if value, ok := pc.mutation.ImageURL(); ok {
		_spec.SetField(page.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := pc.mutation.Content(); ok {
		_spec.SetField(page.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := pc.mutation.Views(); ok {
		_spec.SetField(page.FieldViews, field.TypeInt, value)
		_node.Views = value
	}
	if value, ok := pc.mutation.CanEdit(); ok {
		_spec.SetField(page.FieldCanEdit, field.TypeBool, value)
		_node.CanEdit = value
	}
	if nodes := pc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   page.AuthorTable,
			Columns: []string{page.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.account_pages = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PageCreateBulk is the builder for creating many Page entities in bulk.
type PageCreateBulk struct {
	config
	builders []*PageCreate
}

// Save creates the Page entities in the database.
func (pcb *PageCreateBulk) Save(ctx context.Context) ([]*Page, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Page, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PageCreateBulk) SaveX(ctx context.Context) []*Page {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PageCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PageCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
