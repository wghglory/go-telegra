// Code generated by ent, DO NOT EDIT.

package ent

import (
	"telegra/ent/account"
	"telegra/ent/page"
	"telegra/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	accountFields := schema.Account{}.Fields()
	_ = accountFields
	// accountDescShortName is the schema descriptor for short_name field.
	accountDescShortName := accountFields[0].Descriptor()
	// account.ShortNameValidator is a validator for the "short_name" field. It is called by the builders before save.
	account.ShortNameValidator = func() func(string) error {
		validators := accountDescShortName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(short_name string) error {
			for _, fn := range fns {
				if err := fn(short_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// accountDescAuthorName is the schema descriptor for author_name field.
	accountDescAuthorName := accountFields[1].Descriptor()
	// account.AuthorNameValidator is a validator for the "author_name" field. It is called by the builders before save.
	account.AuthorNameValidator = accountDescAuthorName.Validators[0].(func(string) error)
	// accountDescAuthorURL is the schema descriptor for author_url field.
	accountDescAuthorURL := accountFields[2].Descriptor()
	// account.AuthorURLValidator is a validator for the "author_url" field. It is called by the builders before save.
	account.AuthorURLValidator = accountDescAuthorURL.Validators[0].(func(string) error)
	// accountDescAccessToken is the schema descriptor for access_token field.
	accountDescAccessToken := accountFields[3].Descriptor()
	// account.AccessTokenValidator is a validator for the "access_token" field. It is called by the builders before save.
	account.AccessTokenValidator = accountDescAccessToken.Validators[0].(func(string) error)
	// accountDescAuthURL is the schema descriptor for auth_url field.
	accountDescAuthURL := accountFields[4].Descriptor()
	// account.AuthURLValidator is a validator for the "auth_url" field. It is called by the builders before save.
	account.AuthURLValidator = accountDescAuthURL.Validators[0].(func(string) error)
	// accountDescPageCount is the schema descriptor for page_count field.
	accountDescPageCount := accountFields[5].Descriptor()
	// account.DefaultPageCount holds the default value on creation for the page_count field.
	account.DefaultPageCount = accountDescPageCount.Default.(int)
	pageFields := schema.Page{}.Fields()
	_ = pageFields
	// pageDescTitle is the schema descriptor for title field.
	pageDescTitle := pageFields[2].Descriptor()
	// page.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	page.TitleValidator = func() func(string) error {
		validators := pageDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// pageDescAuthorName is the schema descriptor for author_name field.
	pageDescAuthorName := pageFields[4].Descriptor()
	// page.AuthorNameValidator is a validator for the "author_name" field. It is called by the builders before save.
	page.AuthorNameValidator = pageDescAuthorName.Validators[0].(func(string) error)
	// pageDescAuthorURL is the schema descriptor for author_url field.
	pageDescAuthorURL := pageFields[5].Descriptor()
	// page.AuthorURLValidator is a validator for the "author_url" field. It is called by the builders before save.
	page.AuthorURLValidator = pageDescAuthorURL.Validators[0].(func(string) error)
	// pageDescViews is the schema descriptor for views field.
	pageDescViews := pageFields[8].Descriptor()
	// page.DefaultViews holds the default value on creation for the views field.
	page.DefaultViews = pageDescViews.Default.(int)
	// pageDescCanEdit is the schema descriptor for can_edit field.
	pageDescCanEdit := pageFields[9].Descriptor()
	// page.DefaultCanEdit holds the default value on creation for the can_edit field.
	page.DefaultCanEdit = pageDescCanEdit.Default.(bool)
}
